/*
    LoopTK: Protein Loop Kinematic Toolkit
    Copyright (C) 2007 Stanford University

    This program is free software; you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation; either version 2 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License along
    with this program; if not, write to the Free Software Foundation, Inc.,
    51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
*/

#ifndef __P_BLOCK_CONNECTION_H
#define __P_BLOCK_CONNECTION_H

/**
 * <code>PBlockConnection</code> is used to specify and
 * create connections between blocks.  A pair of blocks
 * (such as backbone and sidechain) can form a simple residue,
 * or they can be connected to additional blocks (e.g.
 * to include oxygen atoms or hydrogen atoms).
 */

class PBlockConnection {
  public:

  /**
   * Constructs a new <code>PBlockConnection</code>. Required
   * are: the <code>string</code> ID of the defined block and
   * block being defined; the map of relative positions, as
   * defined in <code>doc/FORMATS</code>; and the <code>vector</code>
   * of block connections specifying which atoms form inter-block
   * bonds.
   */
  PBlockConnection(const string &definedBlock,
                   const string &blockToDefine, 
                   const HASH_MAP_STRPAIR_EX(Vector3) &relativePositions,
                   const vector<PBlockBondShell> &blockConnections);

  /**
   * NewBlock is generated by using the map of relative positions, as defined in 
   * <code>doc/FORMATS</code>; and the <code>vector</code>
   * of block connections specifying which atoms form inter-block
   * bonds.
   */
  void GenerateNewBlock(PBlock *blockDefined, PBlock *incompleteBlock);

  /**
   * Bonds the newly generated block with correct global positions.
   */
  void BondBlocksTogether(PBlock *blockDefined, PBlock *blockJustDefined); 


  /**
   * Returns the <code>StringPair</code> of the defined block and todefine block.
   */
  StringPair getName() const { return make_pair(m_blockDefined->getName(), m_blockToDefine->getName()); } 

  private:

    PBlockShell *m_blockToDefine;
    PBlockShell *m_blockDefined;
    // will choose random positions depending on how well the coordinate frame is defined
    HASH_MAP_STRPAIR_EX(Vector3) m_blockDefinedRelPositions; 
    //first is id of atom in block that's already defined, second is id of atom in block to define
    vector<PBlockBondShell> m_blockConnections; 
};

#endif  // __P_BLOCK_CONNECTION_H
